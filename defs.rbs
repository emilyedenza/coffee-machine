# Core components of the coffee demo to show Kafka and RBS functionality.
# 
# @author Dylan Boyd
module CoffeeMachine
  VERSION: untyped

  class Error < StandardError
  end

  # Runs the consumer portion of the Kafka coffee machine.
  # 
  # @author Dylan Boyd
  class Consumer
    # Run the consumer interactively in a terminal
    # 
    # _@param_ `broker_url` — The Kafka broker URL to consume from.
    def self.run: (String broker_url) -> void
  end

  # Runs the producer portion of the Kafka coffee machine.
  # 
  # @author Dylan Boyd
  class Producer
    # Run the coffee producer interactively to provide brewing parameters.
    # 
    # _@param_ `broker_url` — The Kafka broker URL to consume from.
    # 
    # _@param_ `order_id_prefix` — What to prefix every order ID with.
    def self.run: (String broker_url, String order_id_prefix) -> void

    # Keep asking for more and more coffee, because one can never have enough.
    def self.run_coffee_loop: () -> void
  end

  module Data
    # The coffee types you can order right here, right now.
    class CoffeeTypes
      # List all available types of coffee and their attributes.
      def self.available_types: () -> ::Array[CoffeeMachine::Models::CoffeeType]
    end
  end

  module Models
    # A type of coffee made by humans, and what ingredients you'll need.
    class CoffeeType
      # _@param_ `symbol` — The two-letter symbol used to represent this type of coffee.
      # 
      # _@param_ `name` — The full human-readable name of this coffee type.
      # 
      # _@param_ `ingredients` — What ingredients you'll need in the brewing process.
      def initialize: (String symbol, String name, ::Array[String] ingredients) -> void

      # The two-letter symbol used to represent this type of coffee.
      attr_reader symbol: String

      # The full human-readable name of this coffee type.
      attr_reader name: String

      # What ingredients you'll need in the brewing process.
      attr_reader ingredients: ::Array[String]
    end

    # Defines an order for a single coffee. No, you can't order more than one.
    # 
    # @author Dylan Boyd
    class CoffeeOrder
      # Start up a new coffee order, for when your customers are sleepy.
      # 
      # _@param_ `kind` — the codename for the type of coffee
      # 
      # _@param_ `allow_to_settle` — whether the coffee should settle before serving
      # 
      # _@param_ `for_whom` — the customer name
      # 
      # _@param_ `order_id` — the unique order identifier
      # 
      # _@return_ — all of the coffees
      def initialize: (
                        String kind,
                        bool allow_to_settle,
                        String for_whom,
                        String order_id
                      ) -> void

      # You need to know whether your customer wants milk with some coffee, or
      # pure adrenaline in powder form.
      # 
      # _@return_ — the codename for the type of coffee
      attr_reader kind: String

      # Is the froth just a little too much for you? Let it settle after brewing.
      # 
      # _@return_ — whether the coffee should settle before serving
      attr_reader allow_to_settle: bool

      # Are you making coffee for imaginary people? I didn't think so. For whom
      # is this beverage intended?
      # 
      # _@return_ — the customer name
      attr_reader for_whom: String

      # You need to quickly identify that order. How, you ask? With this.
      # 
      # _@return_ — the unique order identifier
      attr_reader order_id: String
    end
  end
end